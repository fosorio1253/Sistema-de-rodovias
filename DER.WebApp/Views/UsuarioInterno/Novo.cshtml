@model DER.WebApp.ViewModels.UsuarioInternoViewModel
@{
    ViewBag.Title = "SGFD - Cadastro de usuário interno";


}
<section class="content">
    <section class="content-header">
        <div>
            <h1>
                Usuario Interno
            </h1>

            <button type="submit" onclick="Salvar()" class="btn btn-primary" id="btnSalvar">
                <i class="fa fa-save"></i>
                <span>Salvar</span>
            </button>
            <a href="/usuarioInterno/List" class="btn btn-primary">
                <i class="fa fa-arrow-left"></i>
                <span>Voltar</span>
            </a>
        </div>


        <ol class="breadcrumb">
            <li><i class="fa fa-home"></i><a href="/Home/Index"> Home </a></li>
            <li><a href="/UsuarioInterno/List"> Listar Usuário Interno </a></li>
            <li class="active"><a> Cadastro </a></li>
        </ol>
    </section>
    <section class="jumbotron">
        @using (Html.BeginForm("Savar", "UsuarioInterno", FormMethod.Post, new { id = "usuario" }))
        {
            @Html.HiddenFor(model => model.StatusAprovacaoId, new { data_input = "" })
            @Html.HiddenFor(model => model.DataCriacao, new { data_input = "" })
            @Html.Hidden("Grupo", String.Join(",", Model.GruposIDs), new { @id = "hdnGrupo" })
            @Html.HiddenFor(model => model.Id, new { data_input = "" })
            @Html.Hidden("PermissaoAprovacao", (bool)ViewBag.PermissaoAprovacao)
        <div class="container">
            @*<div class="form-group row">
                <label class="col-sm-2 col-form-label">Ativo</label>
                <div class="col-sm-10">
                    <label class="switch">
                        @Html.CheckBoxFor(model => model.Ativo, new { @id = "customSwitch", @data_check = "" })
                    </label>
                </div>
            </div>*@
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Grupo de Acesso *</label>
                <div class="col-sm-10">
                    @Html.DropDownListFor(model => model.GruposIDs, new SelectList(ViewBag.Grupos, "Value", "Text"), new { @class = "form-control isSelect", @data_input = "" })
                    @Html.ValidationMessageFor(m => m.GruposIDs, "", new { @class = "text-danger" })
                </div>
            </div>


            @if (ViewBag.SomenteVisualizar && ViewBag.DesabilitarRegionalId)
            {
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Regional *</label>
                    <div class="col-sm-10">
                        @Html.DropDownListFor(model => model.RegionalId, Model.Regionais, "Selecione", new { @class = "form-control isSelect", @data_input = "", @disabled = "disabled" })
                        @Html.ValidationMessageFor(m => m.RegionalId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Regional *</label>
                    <div class="col-sm-10">
                        @Html.DropDownListFor(model => model.RegionalId, Model.Regionais, "Selecione", new { @class = "form-control isSelect", @data_input = "" })
                        @Html.ValidationMessageFor(m => m.RegionalId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Cargo</label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.Cargo, new { htmlAttributes = new { @class = "form-control", @data_input = "", @maxlength = 50 } })
                    @Html.ValidationMessageFor(m => m.Cargo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Nome *</label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.Nome, new { htmlAttributes = new { @class = "form-control", @data_input = "", @maxlength = 150 } })
                    @Html.ValidationMessageFor(m => m.Nome, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">CPF *</label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.CPF, !ViewBag.SomenteVisualizar ? (object)new { htmlAttributes = new { @class = "form-control", @data_mask = "000.000.000-00", @data_input = "" } } : new { htmlAttributes = new { @class = "form-control", @data_mask = "000.000.000-00", @data_input = "", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(m => m.CPF, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Login *</label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.Login, !ViewBag.SomenteVisualizar ? (object)new { htmlAttributes = new { @class = "form-control", @data_input = "", @maxlength = 10 } } : new { htmlAttributes = new { @class = "form-control", @data_input = "", @maxlength = 100, @disabled = "disabled" } })
                    @Html.ValidationMessageFor(m => m.Login, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <label for="exampleInputEmail1" class="col-sm-2 col-form-label">E-mail * </label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email", @data_input = "", @maxlength = 50 } })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">DDD</label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.DDD, new { htmlAttributes = new { @class = "form-control", @data_mask = "99", @data_input = "" } })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Telefone e ramal</label>
                <div class="col-sm-10">
                    @Html.EditorFor(Model => Model.TelefoneRamal, new { htmlAttributes = new { @class = "form-control", @data_mask = "0000-00009", @data_input = "" } })
                </div>
            </div>
        </div>
        }
    </section>
</section>
<script>


@section Ready{
    $('[data-mask]').each((e, i) => {
        $(i).mask($(i).attr("data-mask"))
    });

    $('#TelefoneRamal').keyup(function (event) {
        if ($(this).val().length == 10) {
            $(this).mask('00000-0009');
        } else {
            $(this).mask('0000-00009');
        }
    })

    $('.isSelect').multiselect({
        includeSelectAllOption: true,
        allSelectedText: 'Todos',
        nonSelectedText: 'Nada selecionado',
        nSelectedText: ' - Selecionados',
        allSelectedText: 'Todos',
        selectAllText: 'Todos'
    });

    $('#hdnGrupo').val().split(',').forEach((e) => {
        $('#GruposIDs option[value="' + e + '"]').prop('selected', true);
    });

    $('#GruposIDs').multiselect('refresh');

    if ($(location).attr("href").toLocaleLowerCase().indexOf('visualizar') > 0) {
        $('[data-input]').attr('disabled', 'disabled');
        $('[data-check]').attr('disabled', 'disabled');
        $('#GruposIDs').multiselect('disable');
        $('#btnSalvar').addClass("hide")
    } else {
        if ($('#StatusAprovacaoId').val() == statusAprovacao.AguardandoAprovacao && $('#PermissaoAprovacao').val() == 'True') $('#pendenteAprovacao').removeClass("hide");
    }

    $('#customSwitch').after('<span class="slider round" for="customSwitch"></span>');
}
    function Aprovar(evt, aprovar) {
        evt.preventDefault();

        swal({
            title: 'Aprovação',
            text: "Deseja realmente " + (aprovar ? "aprovar" : "reprovar") + " o usuário",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Não',
            confirmButtonText: 'Sim'
        }).then((result) => {
            if (result.value) {
                var data = { aprovar: aprovar, idUsuario: $('#Id').val() }
                if (aprovar) {
                    var response = POST('/UsuarioInterno/Aprovar', JSON.stringify(data))
                    if (response.status == true) {
                        swal({
                            type: 'success',
                            title: 'Sucesso',
                            text: 'Usuario aprovado com sucesso!'
                        }).then((result) => {
                            if (result.value) {
                                window.location.href = "/UsuarioInterno/List";
                            }
                        })
                    }
                } else {
                    obterReprova(data)
                }
            }

        })
    }

    function obterReprova(data, recall = false) {
        swal({
            title: recall ? 'digite uma justificativa' : 'Qual a justificativa da reprova?',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            cancelButtonText: 'Cancelar',
            confirmButtonText: 'Enviar'
        }).then((result) => {
            if (result.value == "") {
                obterReprova(data, true);

            }
            else if (result.value != undefined) {
                data.justificativa = result.value
                var response = POST('/UsuarioInterno/Aprovar', JSON.stringify(data))
                if (response.status == true) {
                    swal({
                        type: 'success',
                        title: 'Sucesso',
                        text: 'Usuario reprovado com sucesso!'
                    }).then((result) => {
                        if (result.value) {
                            window.location.href = "/UsuarioInterno/List";
                        }
                    })
                }

            }
        })
    }

    async function Salvar(e) {
        var data = {};
        var formValido = $('#usuario').valid()
        //var cpfValido = TestaCPF($('#CPF'));

        if (formValido /*&& cpfValido*/) {
            $('#usuario [data-check]').each((i, e) => {
                data[$(e).attr("name")] = $(e).is(':checked')
            })
            $('#usuario [data-input]').each((i, e) => {
                data[$(e).attr("name")] = $(e).val()
            });


            swal({
                title: 'Carregando!',
                html: 'Enviando dados...',// add html attribute if you want or remove
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                onBeforeOpen: () => {
                    swal.showLoading()
                },
            });

            swal.showLoading();

            var response = POST('/UsuarioInterno/Salvar', JSON.stringify(data))
            //let response = await salvar(data);


            if (!response.valid) {
                if (!response.validCPF) {
                    swal({
                        type: 'error',
                        title: 'Formulário invalido',
                        text: 'CPF invalido'
                    }).then((result) => {
                        console.log(response.html);
                    })
                } else {
                    messagem = 'Ocorreu um erro, entrar em contato com o suporte.'

                    var validador = "";
                    if (response.anyCPF)
                        validador += " CPF"
                    if (response.anyLogin)
                        validador += (validador == "" ? " " : ", ") + "Login"
                    if (response.anyEmail)
                        validador += (validador == "" ? " " : ", ") + "Email"

                    if (validador != "")
                        messagem = "Usuario já cadastrado, verifique: " + validador;

                    swal({
                        type: (validador != "" ? 'warning' : 'error'),
                        title: (validador != "" ? 'Atenção' : 'Formulário Inválido'),
                        text: messagem
                    })
                }
            }
            else {

                swal.close();

                swal({
                    type: 'success',
                    title: 'Sucesso',
                    text: 'Usuario salvo com sucesso!'
                }).then((result) => {
                    if (result.value) {
                        window.location.href = "/UsuarioInterno/List";
                    }
                })
            }
                
        }


        async function salvar(data) {
            return $.ajax({
                url: '/UsuarioInterno/Salvar',
                processData: true,
                data: data,
                type: 'POST',              
                dataType: 'json'
            }).then(response => response);
        }



    }
</script>